%!PS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  insidefor  –  applique la récursion pour le sous-index i
%  pile attend   n  i
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/insidefor {               %stack quit% n i --
    %exch                    % i n
    2 eq %stack quit                % si i = 3 on ignore la branche
    { exch pop               %   -> on vide i et n
    }{ %valid
        1 sub 
        stack quit%recursive           % appelle la récursion
    } ifelse
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  bouclefor  –  boucle sur i = 0 1 2 3
%  pile attend   n
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/bouclefor {               % n --
    %dup                     % duplique n car le for consomme la copie
    0 1 3 {                 % i vaudra 0 1 2 3
    %stack quit
%        dup                 stack quit%   duplique n pour insidefor
%        exch                %   n i
        insidefor
    } for

    pop                     % enlève la copie résiduelle de n
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  recursive  –  appel récursif principal
%  pile attend   n
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/recursive {               % n --
    dup 0 le
    {                   % cas de base : n ≤ 0 → on stoppe
    }{
        bouclefor           % sinon on continue la descente
    } ifelse
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Exemple d’appel : profondeur 5
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
1 recursive
stack
showpage